{"version":3,"sources":["components/Card/Card.component.jsx","components/Cardlist/Cardlist.component.jsx","components/Search/Search.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","name","alt","Cardlist","monsters","map","id","Search","type","placeholder","onChange","handlesearch","App","e","setState","searchinput","target","value","state","fetch","then","res","json","data","this","mons","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAceA,MAZf,SAAcC,GACZ,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,KAAxC,2BACHC,IAAI,YAEN,6BAAKL,EAAMG,QAAQC,W,MCSVE,MAdf,SAAkBN,GACd,OACI,qBAAKC,UAAU,YAAf,SAEQD,EAAMO,SAASC,KAAI,SAAAL,GACf,OAAO,cAAC,EAAD,CAAMA,QAAWA,GAAcA,EAAQM,UCAnDC,G,MANA,SAACV,GACZ,OAAO,qBAAKC,UAAU,mBAAf,SACH,uBAAOU,KAAK,OAAOC,YAAY,kBAAkBC,SAAUb,EAAMc,aAAcb,UAAU,eCoClFc,G,wDAnCb,aAAe,IAAD,8BACZ,gBAOFD,aAAe,SAACE,GACd,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SAPtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAc,IAJJ,E,qDAYd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAU,EAAKT,SAAS,CAAEV,SAAUmB,S,oBAG9C,WAAU,IAAD,EACyBC,KAAKN,MAA9Bd,EADA,EACAA,SAAUW,EADV,EACUA,YAEbU,EAAOrB,EAASsB,QAAO,SAAC1B,GAC1B,OAAOA,EAAQC,KAAK0B,cAAcC,SAASb,EAAYY,kBAGzD,OACE,sBAAK7B,UAAU,MAAf,UACE,oBAAIA,UAAU,SAAd,6BACA,cAAC,EAAD,CAAQa,aAAca,KAAKb,eAC3B,cAAC,EAAD,CAAUP,SAAYqB,W,GA9BZI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fd8015c4.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Card(props) {\n  return (\n    <div className=\"card-container\">\n      <img\n        src={`https://robohash.org/${props.monster.name}?set=set2&?size=200x200`}\n        alt=\"monster\"\n      />\n      <h1>{props.monster.name}</h1>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from '../Card/Card.component'\nimport './card-list.styles.css';\n\nfunction Cardlist(props){\n    return(\n        <div className=\"card-list\">\n            {\n                props.monsters.map(monster=>{\n                    return <Card monster = {monster} key={monster.id}/>\n                })\n            }\n        </div>\n    )\n}\n\n\n\nexport default Cardlist","import React from 'react';\nimport './search.styles.css'\n\nconst Search = (props)=>{\n    return <div className=\"search-container\">\n        <input type=\"text\" placeholder=\"Search Monsters\" onChange={props.handlesearch} className=\"search\"/>\n    </div>\n}\n\nexport default Search;","import React, { Component } from \"react\";\nimport Cardlist from \"./components/Cardlist/Cardlist.component\";\nimport Search from './components/Search/Search.component'\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchinput : ''\n    };\n  }\n\n  handlesearch = (e) => {\n    this.setState({searchinput : e.target.value})\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((data) => this.setState({ monsters: data }));\n  }\n\n  render() {\n    const {monsters, searchinput} = this.state;\n\n    let mons = monsters.filter((monster)=>{\n      return monster.name.toLowerCase().includes(searchinput.toLowerCase());;\n    })\n\n    return (\n      <div className=\"app\">\n        <h1 className=\"Header\">Monster Rolodex</h1>\n        <Search handlesearch={this.handlesearch} />\n        <Cardlist monsters = {mons} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}